{
  "id": "snapshot_1761839747745_5q8zag15y",
  "approvalId": "approval_1761839707156_y4dfa2t31",
  "approvalTitle": "Steering Tech Document",
  "version": 2,
  "timestamp": "2025-10-30T15:55:47.745Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# Technology Stack\n\n## Project Type\nPromptDevKit Web is a multi-package web application focused on delivering a React-based dashboard for managing AI prompt assets. The repository combines the frontend SPA and Supabase infrastructure into a single pnpm workspace to streamline local development.\n\n## Core Technologies\n\n### Primary Language(s)\n- **Language**: TypeScript 5.x with strict type-checking\n- **Runtime/Compiler**: Node.js 20 LTS with Vite 5 (esbuild during dev, Rollup for production bundles)\n- **Language-specific tools**: pnpm 9 workspace scripts, Supabase CLI helpers, TanStack code generation and linting via ESLint/TypeScript integrations\n\n### Key Dependencies/Libraries\n- **React 18.3**: Core UI rendering with concurrent features enabled by default\n- **@tanstack/react-query 5**: Data fetching/caching with optimistic updates and cache-aware invalidation\n- **@tanstack/react-router 1**: File-light, data-aware routing aligned with the query layer\n- **@supabase/supabase-js 2**: Direct client access to Supabase REST, Auth, and Realtime channels\n- **react-hook-form + Zod**: Form state management with schema validation driven by shared DTOs\n- **Radix UI + shadcn/ui wrappers**: Accessible primitives and consistent design language\n- **Tailwind CSS + tailwind-merge**: Utility-first styling with conflict-aware class merging\n- **Vitest + Testing Library**: Component-level unit testing and DOM assertions\n\n### Application Architecture\nSingle-page application hosted under `apps/frontend`, using TanStack Router for route data loaders and TanStack Query for server state. The frontend communicates directly with Supabase REST/RPC endpoints, relying on Row Level Security for authorization. Providers compose React context for Supabase clients, query client, form configuration, and Sentry hooks.\n\n### Data Storage (if applicable)\n- **Primary storage**: Supabase PostgreSQL 15 with RLS policies covering prompts, teams, plans, and related tables\n- **Caching**: Client-side caching via TanStack Query; HTTP-level caching delegated to Supabase where applicable\n- **Data formats**: JSON payloads for REST/RPC calls, SQL migrations via Supabase CLI, and generated TypeScript types for runtime/service sharing\n\n### External Integrations (if applicable)\n- **APIs**: Supabase Auth, Database REST, Storage, and Realtime services\n- **Protocols**: HTTPS (REST), WebSocket channels for realtime notifications, and SQL over Supabase CLI for migrations/seed\n- **Authentication**: Supabase Auth JWT tokens (anon role in browser). Service role keys are limited to local CLI tooling and never embedded client-side.\n\n### Monitoring & Dashboard Technologies (if applicable)\n- **Dashboard Framework**: React SPA with shadcn/ui providing consistent UI components\n- **Real-time Communication**: Supabase Realtime via `supabase-js` (planned incremental adoption) paired with targeted TanStack Query invalidation\n- **Visualization Libraries**: Native React components and Tailwind CSS (Charting libraries to be evaluated when analytics dashboards are introduced)\n- **State Management**: Server state through TanStack Query, lightweight React context for session/provider wiring, and controlled RHF form state\n\n## Development Environment\n\n### Build & Development Tools\n- **Build System**: Vite 5 bundler with SWC React plugin for fast HMR and production builds\n- **Package Management**: pnpm 9 workspaces (root scripts orchestrate package-specific commands)\n- **Development workflow**: `pnpm -C apps/frontend dev` for Vite HMR, Supabase CLI (`supabase start`, `supabase db reset --seed`) to bootstrap backend services, and `pnpm supabase:types` for regenerated DB types\n\n### Code Quality Tools\n- **Static Analysis**: ESLint with `@typescript-eslint`, React hooks rules, and `eslint-plugin-simple-import-sort`\n- **Formatting**: Prettier (shared config via `.prettierrc`)\n- **Testing Framework**: Vitest for unit tests, @testing-library/react for DOM interaction, and Playwright for e2e regression coverage\n- **Documentation**: Markdown-based README, steering docs, and inline code comments for complex logic\n\n### Version Control & Collaboration\n- **VCS**: Git (pnpm workspace root); GitHub Actions runs CI as source of truth\n- **Branching Strategy**: Lightweight GitHub Flow with short-lived feature branches aligned to micro-tasks\n- **Code Review Process**: PRs gated by CI (`pnpm lint`, `pnpm typecheck`, `pnpm test`, `pnpm -C apps/frontend build`). Reviews prioritize RLS safety, Supabase schema integrity, and regression coverage.\n\n### Dashboard Development (if applicable)\n- **Live Reload**: Vite hot module replacement during `pnpm -C apps/frontend dev`\n- **Port Management**: Default Vite port 5173 for dev; Playwright runs against 4173 during build previews\n- **Multi-Instance Support**: Independent pnpm workspace packages enable concurrent tooling; Supabase CLI manages isolated local services per developer\n\n## Deployment & Distribution (if applicable)\n- **Target Platform(s)**: Cloudflare Pages for static asset hosting; Supabase cloud for managed database/auth/storage\n- **Distribution Method**: Git-based deployments triggered from CI or Cloudflare Pages integrations\n- **Installation Requirements**: Node.js 20+, pnpm 9, Supabase CLI 1.144+ (for local setup) plus Docker Desktop/Podman\n- **Update Mechanism**: Continuous deployment via merged PRs; developers regenerate Supabase types after schema updates\n\n## Technical Requirements & Constraints\n\n### Performance Requirements\n- Fast cold-start and navigation (<200 ms route transitions) leveraging TanStack Query caching and Vite-optimized bundles\n- Keep bundle size lean by relying on tree-shakeable libraries and code splitting per route/domain\n\n### Compatibility Requirements\n- **Platform Support**: Evergreen browsers (Chrome, Edge, Safari, Firefox) with ES2020 support; local tooling requires macOS/Linux development environments\n- **Dependency Versions**: Node 20.x, pnpm 9.x, Supabase CLI â‰¥ v1.144, React 18.3, TanStack Query 5.x\n- **Standards Compliance**: Supabase REST/GraphQL protocols, modern JS modules, and accessible UI patterns from Radix\n\n### Security & Compliance\n- **Security Requirements**: Enforce Supabase RLS policies, never expose service role keys in the client, prefer HTTPS/TLS for all network calls, and rely on Supabase Auth for JWT validation\n- **Compliance Standards**: No formal compliance today; design choices keep data residency within Supabase-managed Postgres and follow least-privilege access\n- **Threat Model**: Protect against unauthorized workspace access, injection via Supabase RPC, and ensure client-side validation matches server policies\n\n### Scalability & Reliability\n- **Expected Load**: Initially targeting tens of active workspaces with prompt libraries in the hundreds; design anticipates scaling via Supabase vertical growth\n- **Availability Requirements**: Depend on Supabase uptime SLAs; frontend should degrade gracefully with clear error boundaries and retry strategies\n- **Growth Projections**: Modular domain folders (prompts, teams) allow incremental features; future extraction to edge functions or worker proxies if business logic outgrows client-only model\n\n## Technical Decisions & Rationale\nPromptDevKit Web prioritizes a BaaS-first approach to minimize custom backend surface area. Supabase handles auth, storage, and database concerns while the frontend leverages TanStack tooling for data orchestration. Type safety is maintained through generated Supabase types and Zod schemas to prevent drift between database and UI forms.\n\n### Decision Log\n1. **Supabase as the primary backend**: Chosen for rapid delivery of auth/RLS-ready Postgres; alternatives like building a bespoke Node service were deferred to reduce operational overhead.\n2. **TanStack Query + Router**: Provides a unified data layer with cache control and loader support, outperforming traditional React Router for data-driven views.\n3. **shadcn/ui atop Radix primitives**: Ensures accessibility and consistent design tokens without maintaining a bespoke component library from scratch.\n\n## Known Limitations\n- **Realtime interactions**: Realtime subscriptions are still being rolled out; most views rely on manual `invalidateQueries`, leaving short-lived staleness windows.\n- **Backend extensibility**: Currently no custom Supabase edge functions; complex workflows may require future RPC or serverless components.\n- **Analytics tooling**: Charts/insights are minimal; selecting a visualization stack (e.g., Tremor or Recharts) remains an open decision once usage metrics mature.\n",
  "fileStats": {
    "size": 8569,
    "lines": 104,
    "lastModified": "2025-10-30T15:54:58.499Z"
  },
  "comments": []
}