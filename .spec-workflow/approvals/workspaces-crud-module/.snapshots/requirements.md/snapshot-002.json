{
  "id": "snapshot_1761669112523_n3ydcgv6n",
  "approvalId": "approval_1761667960695_bfuscobve",
  "approvalTitle": "Requirements document for workspaces-crud-module",
  "version": 2,
  "timestamp": "2025-10-28T16:31:52.523Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# Requirements Document\n\n## Introduction\n\nWorkspaces are the top-level container for prompts, teams, and billing scope inside PromptDevKit. A complete workspace CRUD module must let users create personal or team workspaces, switch between them, and archive or restore them while preserving Supabase-backed authorization. Delivering a cohesive experience ensures individuals can start quickly and teams can grow into collaborative environments without leaving the product.\n\n## Alignment with Product Vision\n\nPromptDevKit focuses on secure, plan-aware collaboration. Centralizing workspace lifecycle management within the app reinforces that vision: users can spin up compliant environments, enforce plan limits, and confidently organize their prompt assets. The CRUD module also streamlines onboarding by giving every user a clear path from personal experimentation to shared team workspaces governed by RLS policies.\n\n## Requirements\n\n### Requirement 1\n\n**User Story:** As an authenticated user, I want to create personal and team workspaces so that I can organize my prompts according to ownership and collaboration needs.\n\n#### Acceptance Criteria\n\n1. WHEN I submit the create workspace form with a name and type THEN the system SHALL call the `create_workspace` Supabase RPC and return the newly created workspace to the client.\n2. WHEN I choose type `team` THEN the system SHALL require a valid linked team ID and reject the request if the Supabase RPC returns a constraint violation.\n3. IF the RPC fails (e.g., due to plan limit or invalid parameters) THEN the system SHALL surface the error inline and prevent partial workspace creation.\n\n### Requirement 2\n\n**User Story:** As a workspace owner or admin, I want to rename, archive, or restore workspaces so that I can keep our workspace list tidy without losing data.\n\n#### Acceptance Criteria\n\n1. WHEN I rename a workspace THEN the system SHALL validate the new name client-side, call the `manage_workspace` RPC with action `rename`, and update the workspace list with optimistic feedback.\n2. WHEN I archive a workspace THEN the system SHALL mark it archived via `manage_workspace` with action `archive`, remove it from active selectors, and move it into an archived list with a toast confirming the action.\n3. WHEN I restore an archived workspace THEN the system SHALL call `manage_workspace` with action `restore`, reinstate the workspace in active selectors, and trigger a background refetch to ensure consistency.\n\n### Requirement 3\n\n**User Story:** As any authenticated member, I want to switch between workspaces easily so that I can access the correct prompts and settings for my current task.\n\n#### Acceptance Criteria\n\n1. WHEN I open the workspace switcher THEN the system SHALL fetch available workspaces using the `workspaces` query key scoped to my user ID and display them ordered by creation date.\n2. WHEN I change the active workspace THEN the system SHALL persist the selection (e.g., session or local storage) and refetch dependent queries (prompts, plan limits, notifications) for the new workspace.\n3. IF fetching workspaces fails due to network or Supabase errors THEN the system SHALL present an inline error with a retry option and avoid changing the active workspace.\n\n### Requirement 4\n\n**User Story:** As a billing-conscious admin, I want workspace creation and archival to respect plan limits so that we stay within entitlements.\n\n#### Acceptance Criteria\n\n1. WHEN I attempt to create a workspace that would exceed my plan’s allowed workspace count THEN the system SHALL block the RPC request, surface an upgrade dialog, and avoid optimistic state changes.\n2. WHEN a workspace is archived THEN the system SHALL refresh plan usage indicators to show reclaimed capacity.\n3. IF plan limit evaluation fails THEN the system SHALL show a warning banner and prevent additional workspace creation until limits can be validated.\n\n### Requirement 5\n\n**User Story:** As a security-conscious product owner, I want all workspace mutations to respect Supabase RLS so that cross-tenant data leaks are impossible.\n\n#### Acceptance Criteria\n\n1. WHEN a user without required role attempts to manage a workspace THEN the Supabase RPC SHALL return an authorization error and the UI SHALL show a “not authorized” toast without exposing workspace metadata.\n2. WHEN authorized users perform workspace CRUD operations THEN the client SHALL pass explicit user/session context to Supabase helpers to allow RLS policies to enforce tenant isolation.\n3. IF the client is offline or the session expires THEN the module SHALL disable mutation controls and prompt the user to reauthenticate before proceeding.\n\n## Non-Functional Requirements\n\n### Code Architecture and Modularity\n- **Single Responsibility Principle**: Keep Supabase access in `domains/workspaces/api`, form schemas in `domains/workspaces/forms`, UI in dedicated components, and context/state management isolated in hooks.\n- **Modular Design**: Expose reusable hooks for workspace switching and plan limit evaluation that other domains (prompts, teams) can consume.\n- **Dependency Management**: Share query keys and limit evaluation utilities with prompts and teams modules for consistency.\n- **Clear Interfaces**: Ensure TypeScript types leverage generated Supabase definitions and avoid `any` fallbacks.\n\n### Performance\n- Workspace list queries SHALL cache for at least 60 seconds and reuse TanStack Query stale timers to minimize redundant network calls.\n- Mutations SHALL use optimistic updates with rollback handlers to keep perceived latency under 200 ms in normal conditions.\n\n### Security\n- All RPC calls SHALL originate from authenticated contexts and never expose service-role keys.\n- Client logic SHALL never attempt to bypass Supabase RLS; authorization failures must be handled gracefully.\n\n### Reliability\n- Mutation failures SHALL provide actionable toasts or inline messages with retry guidance.\n- Forms SHALL guard against duplicate submissions via loading states or debounced handlers.\n- Switching workspaces SHALL fallback to the previous selection if dependent data fails to load.\n\n### Usability\n- Workspace forms SHALL provide inline validation and accessible labeling for assistive technologies.\n- Switcher controls SHALL be keyboard navigable and announce active workspace changes to screen readers.\n- Empty, loading, and error states SHALL include guidance for creating a first workspace or resolving issues.\n",
  "fileStats": {
    "size": 6459,
    "lines": 88,
    "lastModified": "2025-10-28T16:12:32.921Z"
  },
  "comments": []
}